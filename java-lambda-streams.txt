
Repo del proyecto:
https://github.com/jchaconv/lambda-streams


Lambda expression: Is an implementation of an interface.
* To use lambda the interface must have only one abstract method and nothing else.

Clase 1 - How to create a lambda function:

En el package lambda:

Se puede hacer la implementación de una interfaz haciendo uso de varias líneas
Se necesitaría otra implementación similar para otra funcionalidad
Para evitar la verbosidad existen las funciones lambda. (Ver el ejemplo #1)  TestMain.java
Lambda reconoce el tipo de dato según lo que se haya declarado en la interfaz, por eso es opcional poner ese tipo de dato.

***********************************************************************

Clase 2 - SAM:

Ver GreetingService.java
SAM: single abstract method.
En java8 se inventó la anotación @FunctionalInterface para indicar que la interfaz iba a ser usada para expresiones lambda y
debía mantenerse con SAM. (Para que no agreguen otros métodos)

***********************************************************************

Clase 3 - Single line vs Multi line Lambda

Se puede escribir funciones de una sola línea o también con un body de más líneas, para eso se usa {}
Ver TestMain.java

***********************************************************************

Clase 4 - Returning values from lambda

Ver TestMain2.java se puede obviar el return , tuve que hacer otra interfaz que retorne un String

***********************************************************************

Clase 5 - Functional Programming

Key concepts:
- Pure function
- Function as first-class object
- High-order functions

- A way of building software by using pure functions and by avoiding share state & side-effects
    (Ver ejemplo en TestMain2.java)
    * share state: a variable being accessed by more than 1 function
    * side effect: function modifies that variable
    * Esto hace que la funcion no sea pura(share state y side effect)

 - Inspired in math functions. Ex:
    * f(x) = x + 3
    * (x) => x + 3

 - Getting consistent output for the given input.
   The output is completely depending on the input. Ex:

   * (x) => x + 3 + y   ---> what is y? it's a variable that depends on another function. In this case, this is not a pure function.


***********************************************************************

Clase 6 - Function As first class objects

ability to assign a function to a variable - having a ref of function

Así como se puede tener una referencia en POO:
Dog d = new Dog();

En lambdas también, la referencia sería la que hemos estado viendo:

GreetingService2 g2 = (n) -> n.toUpperCase();

* En este caso g2 es una variable que no está ejecutando nada aún, solo almacena.


***********************************************************************

Clase 7 - High order function

Es un función que recibe como parámetro una función lambda(comportamiento que debe ejecutarse)
Ver en TestMain2.java el método test()

En este caso la función tiene la data y le tenemos que decir qué hacer con ella
En POO es al revés, le damos la data y la función tiene el comportamiento.

***********************************************************************

Clase 8 - When lambda is executed

Ver TestMain3.java
* Como lo puse en el ejemplo, el bloque de código en lambda no es ejecutable sino que solo estoy
pasando el comportamiento.
* A diferencia de POO lo que se está mandando a la high order function no es otra función o método como tal
sino el comportamiento.


***********************************************************************
*Nota: De aquí en adelante los ejemplos estarán en los archivos correspondientes al número de clase.

Clase 9 - High Order functions part 2

Una High Order function recibe una función como parámetro pero también puede retornar una función.
Ver el ejemplo en Lec09HighOrderFunctions

***********************************************************************

Clase 10 - Method References part 1, 2, 3 y 4

Sirve para abreviar una función lambda cuando:

-el objeto de entrada simplemente pasa a otro método
-se trata de one line statement
-se invoca a un método del objeto incluso sin pasarle ese objeto (Ex String::toUpperCase)
-tengo dos parametros y paso el 2do a un método del primero (Ex String::concat)
-se usa el parametro en metodos de otro objeto (list::add) sin embargo esto no es pure function porque depende
 de un objeto externo a la función

Ver Lec10MethodReferences.java

Se creó la functional interface:

-StringOperations.java con el método accept
-StringOperations2.java con el método accept
-VoidOperations.java con el método accept
-BooleanOperations.java con el método accept

***********************************************************************
                    SEC02 - FUNCTIONAL INTERFACES
***********************************************************************

-------------------------------------------------------------------------------------------------------------------
    NAME        |   INPUT TYPE  |    RETURN TYPE   |  METHOD  |    FUNCTIONAL COMPOSITION    |      BI TYPE       |
------------------------------------------------------------------------------------------------------------------|
                |               |                  |          |                              |                    |
* Supplier<T>   |     N/A       |       T          |   get    |            N/A               |        N/A         |
                |               |                  |          |                              |                    |
------------------------------------------------------------------------------------------------------------------|
                |               |                  |          |                              |                    |
* Consumer<T>   |      T        |      void        |  accept  |       andThen(Consumer<T>)   |  BIConsumer<T,R>   |
                |               |                  |          |                              |                    |
------------------------------------------------------------------------------------------------------------------|
                |               |                  |          |        and(Predicate)        |                    |
* Predicate<T>  |      T        |    boolean       |   test   |        or(Predicate)         |  BIPredicate<T,R>  |
                |               |                  |          |          negate()            |                    |
------------------------------------------------------------------------------------------------------------------|
                |               |                  |          |                              |                    |
* Function<T,R> |      T        |        R         |  apply   |       andThen(Function)      |  BIFunction<T,U,R> |
                |               |                  |          |       compose(Function)      |                    |
                |               |                  |          |                              |                    |
------------------------------------------------------------------------------------------------------------------|


Clase 11 - Supplier


* No acepta parámetro de entrada y utiliza get() para obtener el resultado (Ej: Obtener decimal)

- Se creó Supplier01.java

Supplier in test automation framework
- Se creó el package Supplier

- El test es una prueba que requiere tener webdrivers descargados(por ahora los omito, queda comentada la clase test)

***********************************************************************

Clase 12 - Consumer

Se usa cuando se necesita hacer alguna operación con un objeto sin esperar un retorno

- Se crearon las clases:
    Consumer01.java --> Ejemplo básico
    Consumer02.java --> Consumer chaining para casos donde se necesite juntar la lógica de dos consumers.
                        se realiza con andThen (se trata de Functional Composition, ver el cuadro arriba)
                        De esta manera podemos switchear fácilmente el comportamiento.

* Tener en cuenta que solo se puede hace lambda chaining de Consumers del mismo tipo.
  Ex: String -> String o Integer -> Integer

***********************************************************************

Clase 13 - BiConsumer

Lo mismo que consumer solo que recibe dos parámetros. Ver BiConsumer01.java

***********************************************************************

Clase 14 - Predicate



***********************************************************************




***********************************************************************




***********************************************************************




***********************************************************************




***********************************************************************




***********************************************************************




***********************************************************************



